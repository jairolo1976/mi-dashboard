// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumno {
  id                Int      @id @default(autoincrement())
  nombre            String
  apellido          String?
  edad              Int
  fechaNacimiento   DateTime?
  categoria         String
  telefono          String?
  email             String?
  direccion         String?
  colegio           String?
  tallaCamiseta     String?
  tallaPantalon     String?
  
  // Información médica
  grupoSanguineo    String?
  alergias          String?
  enfermedades      String?
  medicamentos      String?
  seguroMedico      String?
  numeroSeguro      String?
  
  // Información del tutor principal
  nombreTutor       String?
  apellidoTutor     String?
  telefonoTutor     String?
  emailTutor        String?
  relacionTutor     String?
  
  // Información del segundo tutor
  nombreTutor2      String?
  apellidoTutor2    String?
  telefonoTutor2    String?
  emailTutor2       String?
  relacionTutor2    String?
  
  // Otros
  observaciones     String?
  activo            Boolean  @default(true)
  foto              String?
  
  // NUEVOS CAMPOS PARA EVALUACIONES
  numeroCamiseta    Int?
  posicion          String?  // Portero, Defensa, Medio, Delantero
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // RELACIONES CON EVALUACIONES
  resultadosFisicos         ResultadoFisico[]
  evaluacionesTecnicas      EvaluacionTecnica[]
  evaluacionesActitudinales EvaluacionActitudinal[]
  evaluacionesGlobales      EvaluacionGlobal[]
  configuracionEvaluacion   ConfiguracionEvaluacion?
}

model Staff {
  id        Int      @id @default(autoincrement())
  nombre    String
  apellido  String
  cargo     String
  email     String
  password  String
  telefono  String?
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evento {
  id          Int      @id @default(autoincrement())
  titulo      String
  descripcion String?
  fecha       DateTime
  tipo        String
  lugar       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mensaje {
  id        Int      @id @default(autoincrement())
  sender    String
  subject   String
  body      String
  date      DateTime
  leido     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Casillero {
  id          Int      @id @default(autoincrement())
  numero      String
  ocupado     Boolean  @default(false)
  alumnoId    Int?
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Alerta {
  id          Int      @id @default(autoincrement())
  titulo      String
  descripcion String?
  tipo        String
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notificacion {
  id        Int      @id @default(autoincrement())
  titulo    String
  mensaje   String
  leida     Boolean  @default(false)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipo {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  categoria   String
  estado      String   @default("disponible")
  cantidad    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String
  password  String
  role      String   @default("user")
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Documento {
  id          Int      @id @default(autoincrement())
  titulo      String
  descripcion String?
  archivo     String
  tipo        String
  alumnoId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===== NUEVOS MODELOS PARA SISTEMA DE EVALUACIONES =====

// Configuración de periodicidad de evaluaciones por jugador
model ConfiguracionEvaluacion {
  id                Int      @id @default(autoincrement())
  alumnoId          Int      @unique
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  periodicidadMeses Int      @default(2) // 1, 2 o 3 meses
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Catálogo de pruebas físicas disponibles
model PruebaFisica {
  id                Int      @id @default(autoincrement())
  codigo            String   @unique // SPRINT_20M, COOPER, SALTO_VERTICAL, etc
  nombre            String
  unidad            String   // segundos, metros, cm
  categoria         String   // velocidad, resistencia, potencia, agilidad
  descripcion       String?
  
  resultados        ResultadoFisico[]
  normativas        NormativaReferencia[]
}

// Resultados de las pruebas físicas por alumno
model ResultadoFisico {
  id                Int      @id @default(autoincrement())
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  pruebaId          Int
  prueba            PruebaFisica @relation(fields: [pruebaId], references: [id])
  valor             Float
  fecha             DateTime
  semaforo          String   // verde, amarillo, rojo
  percentil         Int?
  observaciones     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([alumnoId, fecha])
}

// Evaluaciones técnicas por partido o entrenamiento
model EvaluacionTecnica {
  id                Int      @id @default(autoincrement())
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  fecha             DateTime
  tipoEvaluacion    String   // partido, entrenamiento
  
  // Métricas ofensivas
  goles             Int      @default(0)
  asistencias       Int      @default(0)
  tirosPuerta       Int      @default(0)
  tirosDesviados    Int      @default(0)
  
  // Métricas de pase
  pasesBuenos       Int      @default(0)
  pasesTotales      Int      @default(0)
  porcentajePases   Float?   // Calculado: (pasesBuenos/pasesTotales)*100
  
  // Métricas defensivas
  recuperaciones    Int      @default(0)
  intercepciones    Int      @default(0)
  duelosGanados     Int      @default(0)
  duelosPerdidos    Int      @default(0)
  
  // Métricas generales
  minutosJugados    Int      @default(0)
  kmRecorridos      Float?
  toqueBalon        Int?     // Número de toques
  
  // Evaluación por semáforos
  semaforoOfensivo  String?  // Para delanteros/medios ofensivos
  semaforoDefensivo String?  // Para defensas/medios defensivos
  semaforoPases     String?  // Para todos
  semaforoGeneral   String   // Consolidado según posición
  
  observaciones     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([alumnoId, fecha])
}

// Evaluaciones actitudinales periódicas
model EvaluacionActitudinal {
  id                Int      @id @default(autoincrement())
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  fecha             DateTime
  periodo           String   // mensual, bimestral, trimestral
  
  // Métricas 1-5
  disciplina        Int      // Comportamiento, respeto reglas
  concentracion     Int      // Foco en entrenamientos y partidos
  puntualidad       Int      // Asistencia y llegadas a tiempo
  trabajoEquipo     Int      // Cooperación, altruismo
  liderazgo         Int      // Comunicación, ejemplo
  resiliencia       Int      // Respuesta a adversidad
  
  // Datos adicionales
  tarjetasAmarillas Int      @default(0)
  tarjetasRojas     Int      @default(0)
  asistenciaPercent Float?   // % asistencia en el periodo
  
  // Semáforos por área
  semaforoDisciplina     String?
  semaforoTrabajEquipo   String?
  semaforoMentalidad     String?
  semaforoGeneral        String
  
  observaciones     String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([alumnoId, fecha])
}

// Evaluación global consolidada
model EvaluacionGlobal {
  id                    Int      @id @default(autoincrement())
  alumnoId              Int
  alumno                Alumno   @relation(fields: [alumnoId], references: [id])
  fecha                 DateTime
  periodo               String   // mensual, bimestral, trimestral
  
  // Semáforos de las 4 áreas principales
  semaforoFisico        String   // Consolidado de pruebas físicas
  semaforoTecnico       String   // Consolidado de estadísticas partido
  semaforoTactico       String   // Participación, visión de juego
  semaforoActitudinal   String   // Consolidado actitudinal
  
  // Métricas consolidadas
  notaGeneral           Float?   // 0.0 a 10.0
  percentilCategoria    Int?     // Posición respecto a su categoría
  
  // Interpretaciones
  fortalezas            String[] // ["Velocidad excepcional", "Liderazgo natural"]
  areasDesarrollo       String[] // ["Mejorar resistencia", "Control emocional"]
  recomendaciones       String[] // ["Trabajar ejercicios aeróbicos", "Práctica de pases largos"]
  
  // Progreso
  tendenciaFisica       String?  // mejorando, estable, decayendo
  tendenciaTecnica      String?
  tendenciaActitudinal  String?
  
  createdAt             DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([alumnoId, fecha])
}

// Tablas de referencia normativas para interpretación
model NormativaReferencia {
  id                Int      @id @default(autoincrement())
  pruebaId          Int
  prueba            PruebaFisica @relation(fields: [pruebaId], references: [id])
  categoria         String   // Benjamín, Alevín, Infantil, etc.
  sexo              String?  // M, F, null para ambos
  edadMin           Int?
  edadMax           Int?
  
  // Umbrales para semáforos
  valorExcelente    Float    // Verde alto
  valorBueno        Float    // Verde
  valorPromedio     Float    // Amarillo
  valorBajo         Float    // Amarillo bajo
  valorCritico      Float    // Rojo
  
  // Indica si menor valor es mejor (true para tiempos)
  menorEsMejor      Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([pruebaId, categoria, sexo])
}
// ===== MÓDULO PROFESIONAL DE ANÁLISIS DE PARTIDOS =====

model Partido {
  id                Int      @id @default(autoincrement())
  fecha             DateTime
  categoria         String   // Sub-12, Sub-15, etc.
  rival             String
  esLocal           Boolean  @default(true)
  golesPropio       Int      @default(0)
  golesRival        Int      @default(0)
  competicion       String   // Liga, Copa, Amistoso
  resultado         String   // Victoria, Empate, Derrota
  
  // Datos del partido
  clima             String?  // Soleado, Lluvia, etc.
  temperatura       Int?
  estadio           String?
  arbitro           String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relaciones
  alineaciones      AlineacionPartido[]
  estadisticasEquipo EstadisticasEquipo[]
  estadisticasIndividuales EstadisticasIndividuales[]
  eventosPartido    EventoPartido[]
  reportePartido    ReportePartido?
  
  @@map("partidos")
}

model AlineacionPartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  
  posicion          String   // POR, DEF, MC, EXT, DEL
  esTitular         Boolean  @default(true)
  minutosJugados    Int      @default(0)
  esCapitan         Boolean  @default(false)
  dorsalPartido     Int?
  
  // Control de cambios
  minutoSalida      Int?
  minutoEntrada     Int?
  cambiadoPor       Int?     // ID del jugador que lo reemplaza
  
  createdAt         DateTime @default(now())
  
  @@map("alineaciones_partido")
}

model EstadisticasEquipo {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  esEquipoPropio    Boolean  @default(true)
  
  // Estadísticas básicas
  posesionPorcentaje Float   @default(50)
  tirosTotal        Int      @default(0)
  tirosPuerta       Int      @default(0)
  tirosDesviados    Int      @default(0)
  tirosBloqueados   Int      @default(0)
  
  // Pases
  pasesCompletados  Int      @default(0)
  pasesIntentados   Int      @default(0)
  precisionPase     Float    @default(0)
  
  // Acciones defensivas
  recuperaciones    Int      @default(0)
  intercepciones    Int      @default(0)
  entradas          Int      @default(0)
  entradasExitosas  Int      @default(0)
  
  // Balón parado
  corners           Int      @default(0)
  tirosLibres       Int      @default(0)
  penales           Int      @default(0)
  
  // Disciplina
  faltasCommetidas  Int      @default(0)
  faltasRecibidas   Int      @default(0)
  tarjetasAmarillas Int      @default(0)
  tarjetasRojas     Int      @default(0)
  offsides          Int      @default(0)
  
  createdAt         DateTime @default(now())
  
  @@map("estadisticas_equipo")
}

model EstadisticasIndividuales {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  
  posicionJugada    String   // Posición en ese partido
  minutosJugados    Int      @default(0)
  
  // Métricas ofensivas
  goles             Int      @default(0)
  asistencias       Int      @default(0)
  tiros             Int      @default(0)
  tirosPuerta       Int      @default(0)
  ocasionesCreadas  Int      @default(0)
  
  // Métricas de pase
  pasesCompletados  Int      @default(0)
  pasesIntentados   Int      @default(0)
  pasesClave        Int      @default(0)
  centros           Int      @default(0)
  centrosExitosos   Int      @default(0)
  
  // Métricas defensivas
  recuperaciones    Int      @default(0)
  intercepciones    Int      @default(0)
  entradas          Int      @default(0)
  entradasExitosas  Int      @default(0)
  despejes          Int      @default(0)
  bloqueos          Int      @default(0)
  
  // Duelos
  duelosGanados     Int      @default(0)
  duelosPerdidos    Int      @default(0)
  duelosAereos      Int      @default(0)
  duelosAereosGanados Int    @default(0)
  
  // Regates y movilidad
  regates           Int      @default(0)
  regatesExitosos   Int      @default(0)
  carrerasProgresivas Int    @default(0)
  distanciaRecorrida Float?
  
  // Portero específico
  paradasRealizadas Int      @default(0)
  golesEncajados    Int      @default(0)
  salidasExitosas   Int      @default(0)
  centrosAtrapados  Int      @default(0)
  
  // Disciplina
  faltasCommetidas  Int      @default(0)
  faltasRecibidas   Int      @default(0)
  tarjetasAmarillas Int      @default(0)
  tarjetasRojas     Int      @default(0)
  offsides          Int      @default(0)
  
  // Calificación del partido
  calificacion      Float?   // 0.0 a 10.0
  notaPartido       String?  // Breve comentario
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("estadisticas_individuales")
}

model EventoPartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  
  minuto            Int
  segundos          Int      @default(0)
  tipoEvento        String   // GOL, ASISTENCIA, TARJETA, CAMBIO, etc.
  
  // Jugadores involucrados
  jugadorPrincipal  Int?     // ID del jugador principal
  jugadorSecundario Int?     // ID del jugador secundario (asistencia, cambio)
  esEquipoPropio    Boolean  @default(true)
  
  // Ubicación en el campo (coordenadas)
  coordenadaX       Float?   // 0-100 (% del ancho del campo)
  coordenadaY       Float?   // 0-100 (% del largo del campo)
  
  // Detalles del evento
  descripcion       String
  esEventoClave     Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  
  @@map("eventos_partido")
}

model ReportePartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int      @unique
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  
  // Resumen del partido
  resumenGeneral    String?
  puntosPositivos   String?
  puntosNegativos   String?
  
  // Análisis táctico
  analisisOfensivo  String?
  analisisDefensivo String?
  
  // Jugadores destacados
  mejorJugador      Int?     // ID del MVP
  peorRendimiento   Int?     // ID del jugador con peor rendimiento
  
  // Objetivos para próximo partido
  objetivosTacticos String?
  areasDeEnfoque    String?
  
  // Estado del reporte
  estaCompleto      Boolean  @default(false)
  enviadoAPadres    Boolean  @default(false)
  fechaEnvio        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("reportes_partido")
}

// Agregar estas líneas al modelo Alumno existente:
// alineacionesPartido AlineacionPartido[]
// estadisticasPartidos EstadisticasIndividuales[]

// ===== MÓDULO PROFESIONAL DE ANÁLISIS DE PARTIDOS =====

model Partido {
  id                Int      @id @default(autoincrement())
  fecha             DateTime
  categoria         String   
  rival             String
  esLocal           Boolean  @default(true)
  golesPropio       Int      @default(0)
  golesRival        Int      @default(0)
  competicion       String   
  resultado         String   
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relaciones
  alineaciones              AlineacionPartido[]
  estadisticasEquipo        EstadisticasEquipo[]
  estadisticasIndividuales  EstadisticasIndividuales[]
  eventosPartido            EventoPartido[]
  reportePartido            ReportePartido?
  
  @@map("partidos")
}

model AlineacionPartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  
  posicion          String   
  esTitular         Boolean  @default(true)
  minutosJugados    Int      @default(0)
  esCapitan         Boolean  @default(false)
  dorsalPartido     Int?
  
  createdAt         DateTime @default(now())
  
  @@map("alineaciones_partido")
}

model EstadisticasEquipo {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  esEquipoPropio    Boolean  @default(true)
  
  posesionPorcentaje Float   @default(50)
  tirosTotal        Int      @default(0)
  tirosPuerta       Int      @default(0)
  pasesCompletados  Int      @default(0)
  pasesIntentados   Int      @default(0)
  recuperaciones    Int      @default(0)
  corners           Int      @default(0)
  faltasCommetidas  Int      @default(0)
  faltasRecibidas   Int      @default(0)
  tarjetasAmarillas Int      @default(0)
  tarjetasRojas     Int      @default(0)
  
  createdAt         DateTime @default(now())
  
  @@map("estadisticas_equipo")
}

model EstadisticasIndividuales {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  alumnoId          Int
  alumno            Alumno   @relation(fields: [alumnoId], references: [id])
  
  posicionJugada    String
  minutosJugados    Int      @default(0)
  
  // Métricas ofensivas
  goles             Int      @default(0)
  asistencias       Int      @default(0)
  tiros             Int      @default(0)
  tirosPuerta       Int      @default(0)
  
  // Métricas de pase
  pasesCompletados  Int      @default(0)
  pasesIntentados   Int      @default(0)
  pasesClave        Int      @default(0)
  
  // Métricas defensivas
  recuperaciones    Int      @default(0)
  intercepciones    Int      @default(0)
  entradas          Int      @default(0)
  entradasExitosas  Int      @default(0)
  despejes          Int      @default(0)
  
  // Duelos
  duelosGanados     Int      @default(0)
  duelosPerdidos    Int      @default(0)
  
  // Regates
  regates           Int      @default(0)
  regatesExitosos   Int      @default(0)
  
  // Portero específico
  paradasRealizadas Int      @default(0)
  golesEncajados    Int      @default(0)
  
  // Disciplina
  faltasCommetidas  Int      @default(0)
  faltasRecibidas   Int      @default(0)
  tarjetasAmarillas Int      @default(0)
  offsides          Int      @default(0)
  
  // Calificación del partido
  calificacion      Float?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("estadisticas_individuales")
}

model EventoPartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  
  minuto            Int
  tipoEvento        String   
  jugadorId         Int?
  esEquipoPropio    Boolean  @default(true)
  descripcion       String
  
  // Coordenadas para mapas de calor
  coordenadaX       Float?   // 0-100 (% del ancho del campo)
  coordenadaY       Float?   // 0-100 (% del largo del campo)
  
  createdAt         DateTime @default(now())
  
  @@map("eventos_partido")
}

model ReportePartido {
  id                Int      @id @default(autoincrement())
  partidoId         Int      @unique
  partido           Partido  @relation(fields: [partidoId], references: [id], onDelete: Cascade)
  
  resumenGeneral    String?
  puntosPositivos   String?
  puntosNegativos   String?
  mejorJugador      Int?
  
  // Análisis táctico
  analisisOfensivo  String?
  analisisDefensivo String?
  
  estaCompleto      Boolean  @default(false)
  enviadoAPadres    Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("reportes_partido")
}
